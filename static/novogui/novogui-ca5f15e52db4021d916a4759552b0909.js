var alwaysVisibile="true";var SettingType={COMBOBOX:0,SLIDER:1,TEXTBOX:2,SELECTBOX:3,CHECKBOX:4,COLOR:5}
class Setting{constructor(parent,name,type,visibilityDependency){this.parent=parent;this.name=name;this.type=type;this.visibilityDependency=visibilityDependency;}}
class ComboboxSetting extends Setting{constructor(parent,name,acceptableValues,visibilityDependency){super(parent,name,SettingType.COMBOBOX,visibilityDependency);this.acceptableValues=acceptableValues;}}
class SliderSetting extends Setting{constructor(parent,name,minValue,maxValue,increment,visibilityDependency){super(parent,name,SettingType.SLIDER,visibilityDependency);this.minValue=minValue;this.maxValue=maxValue;this.increment=increment;}}
class TextboxSetting extends Setting{constructor(parent,name,defaultValue,visibilityDependency){super(parent,name,SettingType.TEXTBOX,visibilityDependency);this.defaultValue=defaultValue;}}
class CheckboxSetting extends Setting{constructor(parent,name,visibilityDependency){super(parent,name,SettingType.CHECKBOX,visibilityDependency);}}
class SelectboxSetting extends Setting{constructor(parent,name,acceptableValues,visibilityDependency){super(parent,name,SettingType.SELECTBOX,visibilityDependency);this.acceptableValues=acceptableValues;}}
class ColorSetting extends Setting{constructor(parent,name,visibilityDependency){super(parent,name,SettingType.COLOR,visibilityDependency);}}
class Module{constructor(name,description,settings){this.name=name;this.description=description;this.settings=settings;}}
var settings=new Map();var moduleRegistry=[];function getNextSlider(sliderId){switch(sliderId){case "h":return "s";case "s":return "l";case "l":return "h";}}
function checkboxChecked(setting){return $("#"+setting+" > .checkbox-value").hasClass("checkbox-checked");}
function getSliderValue(setting){return $("#"+setting+" > .real-slider").val();}
function getSelectboxValue(setting){return $('#'+setting+' > .selectbox-value').text();}
function selectboxHasItem(setting,item){return $("#"+setting+" > .combobox-items > li:contains('"+item+"')").hasClass("selected-item");}
function expandHandler(module){var growDiv=$("#"+module+'-module > .module-settings-wrapper');var expander=$("#"+module+'-module > .module-header > .module-expand');if(growDiv.height()){growDiv.height(0);expander.css("transform","rotateX(0deg)");}else{var wrapper=$("#"+module+'-module > .module-settings-wrapper > .module-settings');growDiv.height(wrapper.height());expander.css("transform","rotateX(180deg)");}
return false;}
function forceUpdate(module){var growDiv=$("#"+module+'-module > .module-settings-wrapper');var wrapper=$("#"+module+'-module > .module-settings-wrapper > .module-settings');growDiv.height(wrapper.height());}
function toggleModule(module){var moduleHeader=$("#"+module+"-module > .module-header");if(moduleHeader.hasClass("toggled-module")){moduleHeader.removeClass("toggled-module");}else{moduleHeader.addClass("toggled-module");}}
function registerModules(){$.get("static/novogui/modules.json",function(modules){modules.forEach(category=>{appendCategoryToDOM(category);category.children.forEach(module=>{var sets=new Map();moduleRegistry.push(module);if("settings"in module)
module.settings.forEach(setting=>{var setting,settingName=setting.name;var visibilityDependency="visibilityDependency"in setting?setting.visibilityDependency:alwaysVisibile;switch(SettingType[setting.type]){case SettingType.SELECTBOX:setting=new SelectboxSetting(module,setting.displayName,setting.acceptableValues,visibilityDependency);break;case SettingType.COMBOBOX:setting=new ComboboxSetting(module,setting.displayName,setting.acceptableValues,visibilityDependency);break;case SettingType.CHECKBOX:setting=new CheckboxSetting(module,setting.displayName,visibilityDependency);break;case SettingType.TEXTBOX:setting=new TextboxSetting(module,setting.displayName,setting.defaultValue,visibilityDependency);break;case SettingType.SLIDER:setting=new SliderSetting(module,setting.displayName,setting.minValue,setting.maxValue,setting.increment,visibilityDependency);break;case SettingType.COLOR:setting=new ColorSetting(module,setting.displayName,visibilityDependency);break;}
settings.set(settingName,setting);sets.set(settingName,setting);});appendModuleToDOM(category,module);});});console.log("[novogui] Rendered modules");registerHandlers();});}
function toggleClass(element,name){if(element.hasClass(name)){element.removeClass(name);}else{element.addClass(name);}}
function appendCategoryToDOM(category){var html="<div id=\""+category.name+"-tab\" class=\"panel\">";html+="<div class=\"panel-header\">";html+="<span class=\"panel-title\">"+category.displayName+"</span>";html+="<img class=\"panel-icon\" loading=\"lazy\" src=\"/static/novogui/icons/"+category.name+".png\">";html+="</div>";html+="<div class=\"panel-elements\">";html+="</div>";$('.clickgui').append(html);}
function appendModuleToDOM(category,module){var html="<div id=\""+module.name+"-module\" class=\"module\">";html+="<div class=\"module-header\">";html+="<span class=\"module-title\">"+module.name+"</span>";if(module.settings.length>0)
html+="<span class=\"module-expand\">v</span>";html+="</div>";html+="<div class=\"module-settings-wrapper\">";if(module.settings.length>0)
html+=renderSettings(module)
html+="</div></div></div>";$("#"+category.name+"-tab > .panel-elements").append(html);if(module.settings.length>0){$("#"+module.name+"-module > .module-header").contextmenu(function(){return expandHandler(module.name);});}
$("#"+module.name+"-module > .module-header").click(function(){toggleModule(module.name);});}
function renderSettings(module){var html="<div class=\"module-settings\">";module.settings.forEach(setting=>{switch(SettingType[setting.type]){case SettingType.SELECTBOX:html+="<div id=\""+setting.name+"\" class=\"setting selectbox-setting\">";html+="<span class=\"setting-title\">"+setting.displayName+"</span>";html+="<span class=\"selectbox-value\">"+setting.acceptableValues[0]+"</span>";html+="</div>";break;case SettingType.COMBOBOX:html+="<div class=\"setting combobox-setting\" id=\""+setting.name+"\">";html+="<div class=\"combobox-wrapper\">";html+="<span class=\"combobox-title\">"+setting.displayName+"</span>";html+="</div>";html+="<ul class=\"combobox-items collapsed-combobox\">";setting.acceptableValues.forEach(value=>{html+="<li>"+value+"</li>";});html+="</ul></div>";break;case SettingType.CHECKBOX:html+="<div id=\""+setting.name+"\" class=\"setting checkbox-setting\">";html+="<span class=\"setting-title\">"+setting.displayName+"</span>";html+="<div class=\"checkbox-value\"></div>";html+="</div>";break;case SettingType.TEXTBOX:html+="<div class=\"setting textbox-setting\" id=\""+setting.name+"\">";html+="<span class=\"setting-title\">"+setting.displayName+"</span>";html+="<input type=\"text\" class=\"clickgui-textbox\" placeholder=\""+setting.defaultValue+"\">";html+="</div>";break;case SettingType.SLIDER:html+="<div class=\"setting slider-setting\" id=\""+setting.name+"\">";html+="<input type=\"range\" class=\"display-slider\" min=\""+setting.minValue+"\" max=\""+setting.maxValue+"\" step=\""+setting.increment+"\" value=\""+setting.minValue+"\" disabled>";html+="<input type=\"range\" class=\"real-slider\" min=\""+setting.minValue+"\" max=\""+setting.maxValue+"\" step=\""+setting.increment+"\" value=\""+setting.minValue+"\">";html+="<div class=\"slider-value-holder\">";html+="<span class=\"setting-title\">"+setting.displayName+"</span>";html+="<span class=\"slider-value\">"+setting.minValue+"</span>";html+="</div></div>";break;case SettingType.COLOR:html+="<div class=\"setting color-setting\" id=\""+setting.name+"\">";html+="<div class=\"sliders\" slider=\"h\">";html+="<input type=\"range\" class=\"color-slider h-slider\" min=\"1\" max=\"360\" disabled>";html+="<input type=\"range\" class=\"real-color-slider real-h-slider\" min=\"0\" max=\"360\" slider=\"h\">";html+="<input type=\"range\" class=\"color-slider s-slider disabled-color-slider\" min=\"0\" max=\"100\" disabled>";html+="<input type=\"range\" class=\"real-color-slider real-s-slider disabled-color-slider\" min=\"0\" max=\"100\" slider=\"s\">";html+="<input type=\"range\" class=\"color-slider l-slider disabled-color-slider\" min=\"0\" max=\"100\" disabled>";html+="<input type=\"range\" class=\"real-color-slider real-l-slider disabled-color-slider\" min=\"0\" max=\"100\" slider=\"l\">";html+="<span class=\"setting-title\">"+setting.displayName+"</span>";html+="</div></div>";break;}});return html;}
function refreshSettingVisiblity(module){if("settings"in module)
module.settings.forEach(setting=>{if(eval(setting.visibilityDependency)==false){$("#"+setting.name).addClass("setting-disabled");}else{$("#"+setting.name).removeClass("setting-disabled");}});}
function refreshSettings(module){refreshSettingVisiblity(module);forceUpdate(module.name);}
function getHSLColorFromSetting(setting){var h=$("#"+setting+" > .sliders > .real-h-slider").val();var s=$("#"+setting+" > .sliders > .real-s-slider").val();var l=$("#"+setting+" > .sliders > .real-l-slider").val();return "hsl("+h+", "+s+", "+l+")";}
$(document).ready(function(){registerModules();});function registerHandlers(){moduleRegistry.forEach(module=>{refreshSettingVisiblity(module);});$(".real-slider").on("input",function(){var id=$(this).parent().attr("id");var setting=settings.get(id);$("#"+id+" > .display-slider").val(this.value);$("#"+id+" > .slider-value-holder > .slider-value").html(this.value);refreshSettings(setting.parent);});$(".combobox-items > li").click(function(event){var element=$(event.target);var id=$(this).parent().parent().attr('id');var setting=settings.get(id);toggleClass(element,"selected-item");refreshSettings(setting.parent);});$(".combobox-wrapper").click(function(event){var id=$(this).parent().attr("id");toggleClass($("#"+id+" > .combobox-items"),"collapsed-combobox");var module=$(this).parent().parent().parent().parent().attr("id").split("-")[0];forceUpdate(module);});$(".selectbox-value").click(function(event){var name=event.target.parentElement.id;var setting=settings.get(name);var value=$("#"+name+" > .selectbox-value");var i=setting.acceptableValues.indexOf(value.text());i=++i==setting.acceptableValues.length?0:i;value.text(setting.acceptableValues[i]);refreshSettings(setting.parent);});$(".checkbox-value").click(function(event){var name=event.target.parentElement.id;var element=$(event.target);var setting=settings.get(name);toggleClass(element,"checkbox-checked");refreshSettings(setting.parent);});$(".sliders").contextmenu(function(event){var id=$(event.target).parent().parent().attr("id");var slider=$(event.target).parent().attr("slider");var next=getNextSlider(slider);$(event.target).parent().attr("slider",next);$("#"+id+" > .sliders > ."+slider+"-slider").addClass("disabled-color-slider");$("#"+id+" > .sliders > .real-"+slider+"-slider").attr("disabled",true);$("#"+id+" > .sliders > .real-"+slider+"-slider").addClass("disabled-color-slider");$("#"+id+" > .sliders > ."+next+"-slider").removeClass("disabled-color-slider");$("#"+id+" > .sliders > .real-"+next+"-slider").attr("disabled",false);$("#"+id+" > .sliders > .real-"+next+"-slider").removeClass("disabled-color-slider");return false;});$(".real-color-slider").on("input",function(){var slider=$(this).attr("slider");var id=$(this).parent().parent().attr("id");$("#"+id+" > .sliders > ."+slider+"-slider").val(this.value);if(slider=="h"){$("#"+id+" > .sliders > .s-slider").css("background-color","hsl("+this.value+", 100%, 50%)");$("#"+id+" > .sliders > .l-slider").css("background-color","hsl("+this.value+", 100%, 50%)");}});$('.real-h-slider').each(function(){var id=$(this).parent().parent().attr("id");$("#"+id+" > .sliders > .s-slider").css("background-color","hsl("+this.value+", 100%, 50%)");$("#"+id+" > .sliders > .l-slider").css("background-color","hsl("+this.value+", 100%, 50%)");});}